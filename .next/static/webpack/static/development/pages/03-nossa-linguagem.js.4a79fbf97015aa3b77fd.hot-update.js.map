{"version":3,"file":"static/webpack/static/development/pages/03-nossa-linguagem.js.4a79fbf97015aa3b77fd.hot-update.js","sources":["webpack:///./pages/03-nossa-linguagem.js"],"sourcesContent":["import React from 'react'\nimport { page, linguage1, linguage2 } from 'data/pages/03.json'\nimport Button from 'components/Common/Button'\nimport ComponentList from 'components/Common/ComponentList'\nimport H2 from 'components/HTML/H2'\nimport H3 from 'components/HTML/H3'\nimport HTML from 'components/HTML/HTML'\nimport P from 'components/HTML/P'\nimport PageView from 'components/Views/PageView'\nimport ScrollTo from 'components/Common/ScrollTo'\nimport Section from  'components/HTML/Section'\nimport Slide from 'components/Slider/Slide'\nimport Slider from 'components/Slider/Slider'\n\nexport default () => (\n  <PageView {...page}>\n    <Section1 />\n    <Section2 />\n    <SectionLinguage {...linguage1} />\n    <SectionLinguage {...linguage2} className=\"BGWhite\" />\n  </PageView>\n)\n\nconst Section1 = () => (\n  <Slider id=\"target\">\n    <Slide>\n      <div style={{ height: 320 }}>\n        <H3>Nós falamos o português correto sempre</H3>\n      </div>\n    </Slide>\n  </Slider>\n)\n\nconst Section2 = () => (\n  <Section className=\"BGSecondary\">\n    <H2>\n      Título lorem ipsum sobre linguagem ativa e passiva\n    </H2>\n    <P>\n      Nós praticamos 2 tipos de linguagem, a ATIVA e a REATIVA.\n      Elas permitem que nós sejamos acolhedores sem desrespeitar as nossas regras de linguagem.\n    </P>\n    <ScrollTo to=\"linguagem\" offsetTop={80}>\n      <Button className=\"BtnOutlineInverted\">Vamos lá</Button>\n    </ScrollTo>\n  </Section>\n)\n\n\nconst SectionLinguage = ({ slide1, slide2, title, className }) => (\n  <section id=\"linguagem\" className={className}>\n    <div className=\"TextCenter PB2x\">\n      <H3 className=\"Medium\">{title}</H3>\n    </div>\n    <Slider fix>\n      <Slide1 {...slide1} />\n      <Slide2 {...slide2} />\n    </Slider>\n  </section>\n)\n\nconst Slide1 = ({ list }) => {\n  const parseList = list.map(text => ({ text }))\n  return (\n    <ComponentList component={Step}>\n      {parseList}\n    </ComponentList>\n  )\n}\n\nconst Step = ({ index, text }) => (\n  <div className=\"Flex JCCenter PB16\">\n    <div className=\"Flex AICenter W100\" style={{ maxWidth: 400 }}>\n      <div className=\"ColorPrimary Saira SairaLight FS9x FlexGrow\">\n        {index + 1}.\n      </div>\n      <HTML className=\"W80 SingleSpace ColorGray\">\n        {text}\n      </HTML>\n    </div>\n  </div>\n)\n\nconst Slide2 = ({ text, listTitle, list }) => (\n  <Slide>\n    <P>{text}</P>\n  </Slide>\n)\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AACA;AAQA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AACA;AASA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAVA;AACA;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPA;AACA;AAWA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANA;AACA;AAYA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}