{"version":3,"file":"static/webpack/static/development/pages/03-nossa-linguagem.js.01c720f11dfa6a728c00.hot-update.js","sources":["webpack:///./pages/03-nossa-linguagem.js"],"sourcesContent":["import React from 'react'\nimport classNames from 'classnames'\nimport { page, slides, linguage1, linguage2 } from 'data/pages/03.json'\nimport Button from 'components/Common/Button'\nimport ComponentList from 'components/Common/ComponentList'\nimport H2 from 'components/HTML/H2'\nimport H3 from 'components/HTML/H3'\nimport HTML from 'components/HTML/HTML'\nimport P from 'components/HTML/P'\nimport PageView from 'components/Views/PageView'\nimport ScrollTo from 'components/Common/ScrollTo'\nimport Section from  'components/HTML/Section'\nimport Slide from 'components/Slider/Slide'\nimport Slider from 'components/Slider/Slider'\n\nexport default () => (\n  <PageView {...page}>\n    <Section1 />\n    <Section2 />\n    <SectionLinguage {...linguage1} className=\"BGLightGray\" />\n    <SectionLinguage {...linguage2} className=\"BGWhite\" />\n  </PageView>\n)\n\nconst Section1 = () => (\n  <Slider id=\"target\">\n    {slides.map(SlideLinguages)}\n  </Slider>\n)\n\nconst SlideLinguages = ({ title, comparativeList = [] }, key) => (\n  <Slide key={key}>\n    <div style={{ maxWidth: 400 }}>\n      <H2>{title}</H2>\n      <div className=\"P2x\">\n        <ComponentList component={Comparative}>\n          {comparativeList}\n        </ComponentList>\n      </div>\n    </div>\n  </Slide>\n)\n\nconst Comparative = ({ title, yes, not }) => (\n  <div className=\"PV8\">\n    <div className=\"ColorPrimary Saira Medium PV8 Absolute W100 TextCenter\">\n      {title}\n    </div>\n    <div className=\"Flex JCSpaceBetween AICenter\">\n      <ComparativeColumn\n        style={{ borderRight: '1px solid #DDD' }}\n        icon={<IconCheck />}\n        texts={yes} />\n      <ComparativeColumn icon={<IconClose />} texts={not} />\n    </div>\n  </div>\n)\n\nconst ComparativeColumn = ({ texts, icon, style }) => (\n  <div className=\"W100\" style={style}>\n    <div style={{ transform: 'translateY(-24px)' }}>\n      <div>{icon}</div>\n      <div className=\"PT8 PH8 ColorGray FS3x\" style={{ marginBottom: -24 }}>\n        <p>{texts}</p>\n      </div>\n    </div>\n  </div>\n)\n\nconst Section2 = () => (\n  <Section className=\"BGSecondary\">\n    <H2>\n      Título lorem ipsum sobre linguagem ativa e passiva\n    </H2>\n    <P>\n      Nós praticamos 2 tipos de linguagem, a ATIVA e a REATIVA.\n      Elas permitem que nós sejamos acolhedores sem desrespeitar as nossas regras de linguagem.\n    </P>\n    <ScrollTo to=\"linguagem\" offsetTop={80}>\n      <Button className=\"BtnOutlineInverted\">Vamos lá</Button>\n    </ScrollTo>\n  </Section>\n)\n\n\nconst SectionLinguage = ({ slide1, slide2, title, className }) => (\n  <section id=\"linguagem\" className={classNames(className, 'PT3x')}>\n    <div className=\"TextCenter\">\n      <H3 className=\"Medium\">{title}</H3>\n    </div>\n    <Slider fix>\n      <Slide1 {...slide1} />\n      <Slide2 {...slide2} />\n    </Slider>\n  </section>\n)\n\nconst Slide1 = ({ list }) => (\n  <Slide>\n    <ComponentList component={Step}>\n      {parseList(list)}\n    </ComponentList>\n  </Slide>\n)\n\nconst parseList = list => list.map(text => ({ text }))\n\nconst Step = ({ index, text }) => (\n  <div className=\"Flex JCCenter PB16 TextLeft\">\n    <div className=\"Flex AICenter W100\" style={{ maxWidth: 400 }}>\n      <div className=\"ColorPrimary Saira SairaLight FS9x FlexGrow\">\n        {index + 1}.\n      </div>\n      <HTML className=\"W80 SingleSpace ColorGray\">\n        {text}\n      </HTML>\n    </div>\n  </div>\n)\n\nconst Slide2 = ({ text, listTitle, list, maxWidth }) => (\n  <Slide>\n    <P>{text}</P>\n    <p className=\"Saira Light ColorPrimary FS4x PB24\">{listTitle}</p>\n    <ComponentList component={Li} componentProps={{ maxWidth }}>\n      {parseList(list)}\n    </ComponentList>\n  </Slide>\n)\n\nconst Li = ({ text, maxWidth = 600 }) => (\n  <div className=\"Flex TextLeft MHAuto\" style={{ maxWidth }}>\n    <div className=\"PR16 ColorPrimary\">\n      <svg width={24} height={24} viewBox=\"0 0 24 24\">\n        <path\n          fill=\"#522b79\"\n          d=\"M12,8A4,4 0 0,0 8,12A4,4 0 0,0 12,16A4,4 0 0,0 16,12A4,4 0 0,0 12,8Z\" />\n      </svg>\n    </div>\n    <p className=\"ColorBlack SingleSpace Opacity5 FS2x PB8 M0\">{text}</p>\n  </div>\n)\n\nconst IconClose = () => (\n  <svg width={16} height={16} viewBox=\"0 0 24 24\">\n    <path fill=\"#F28D8D\" d=\"M12,2C17.53,2 22,6.47 22,12C22,17.53 17.53,22 12,22C6.47,22 2,17.53 2,12C2,6.47 6.47,2 12,2M15.59,7L12,10.59L8.41,7L7,8.41L10.59,12L7,15.59L8.41,17L12,13.41L15.59,17L17,15.59L13.41,12L17,8.41L15.59,7Z\" />\n  </svg>\n)\n\nconst IconCheck = () => (\n  <svg width={16} height={16} viewBox=\"0 0 24 24\">\n    <path fill=\"#9CDB9C\" d=\"M22,12A10,10 0 0,1 12,22A10,10 0 0,1 2,12A10,10 0 0,1 12,2A10,10 0 0,1 22,12M6,10L12,16L18,10L16.6,8.6L12,13.2L7.4,8.6L6,10Z\" />\n  </svg>\n)\n"],"mappings":"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","sourceRoot":""}